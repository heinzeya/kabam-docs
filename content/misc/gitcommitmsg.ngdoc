@ngdoc overview
@name Git Commit Message Conventions
@description
Commit message conventions, adapted from
<a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#">Angular's Conventions</a>

* <a href="#H1_1">Goals</a>
* <a href="#H1_1_1">Generating CHANGELOG.md</a>
* <a href="#H1_1_2">Recognizing unimportant commits</a>
* <a href="#H1_1_3">Provide more information when browsing the history</a>
* <a href="#H1_2">Format of the commit message</a>
* <a href="#H1_2_1">Subject line</a>
* <a href="#H1_2_2">Allowed &lt;type&gt;</a>
* <a href="#H1_2_3">Allowed &lt;scope&gt;</a>
* <a href="#H1_2_4">Message body</a>
* <a href="#H1_2_5">Message footer</a>
* <a href="#H1_2_6">Breaking changes</a>
* <a href="#H1_2_7">Referencing issues</a>
* <a href="#H1_3">Examples</a>

<a name="H1_1"></a>
# Goals

1. allow generating CHANGELOG.md by script
2. allow ignoring commits by git bisect (not important commits like formatting)
3. provide better information when browsing the history

<a name="H1_1_1"></a>
## Generating CHANGELOG.md
We use these three sections in changelog: **new features**, **bug fixes**, **breaking changes**.
This list could be generated by script when doing a release. Along with links to related commits.
Of course you can edit this change log before actual release, but it could generate the skeleton.

List of all subjects (first lines in commit message) since last release:

    $ git log <last tag> HEAD --pretty=format:%s

New features in this release

    $ git log <last release> HEAD --grep feature

<a name="H1_1_2"></a>
## Recognizing unimportant commits
These are formatting changes (adding/removing spaces/empty lines, indentation), missing semi colons,
comments. So when you are looking for some change, you can ignore these commits - no logic change
inside this commit.

When bisecting, you can ignore these by:

    >> git bisect skip $(git rev-list --grep irrelevant <good place> HEAD)

<a name="H1_1_3"></a>
## Provide more information when browsing the history
This would add kinda “context” information.
Look at these messages (taken from last few angular’s commits):

1. Fix small typo in docs widget (tutorial instructions)
2. Fix test for scenario.Application - should remove old iframe
3. docs - various doc fixes
4. docs - stripping extra new lines
5. Replaced double line break with single when text is fetched from Google
6. Added support for properties in documentation

All of these messages try to specify where is the change. But they don’t share any convention...

Look at these messages:

1. fix comment stripping
2. fixing broken links
3. Bit of refactoring
4. Check whether links do exist and throw exception
5. Fix sitemap include (to work on case sensitive linux)

Are you able to guess what’s inside ? These messages miss place specification...
So maybe something like parts of the code: docs, docs-parser, compiler, scenario-runner, ...

I know, you can find this information by checking which files had been changed, but that’s slow.
And when looking in git history I can see all of us tries to specify the place, only missing the
convention.

<a name="H1_2"></a>
# Format of the commit message

    <type>(<scope>): <subject>
    <BLANK LINE>
    <body>
    <BLANK LINE>
    <footer>

First line cannot be longer than 70 characters, second line is always blank and other lines should
be wrapped at 80 characters! This allows the message to be easier to read on github as well as in
various git tools.

<a name="H1_2_1"></a>
## Subject line

Subject line contains succinct description of the change.

<a name="H1_2_2"></a>
## Allowed &lt;type&gt;

1. feat (feature)
2. fix (bug fix)
3. docs (documentation)
4. style (formatting, missing semi colons, …)
5. refactor
6. test (when adding missing tests)
7. chore (maintain)

<a name="H1_2_3"></a>
## Allowed &lt;scope&gt;
Scope could be anything specifying place of the commit change. For example $location, $browser,
$compile, $rootScope, ngHref, ngClick, ngView, etc...

<a name="H1_2_4"></a>
## &lt;subject&gt; text

1. use imperative, present tense: “change” not “changed” nor “changes”
2. don't capitalize first letter
3. no dot (.) at the end

<a name="H1_2_5"></a>
## Message body

1. just as in <subject> use imperative, present tense: “change” not “changed” nor “changes”
2. includes motivation for the change and contrasts with previous behavior

References

* [http://365git.tumblr.com/post/3308646748/writing-git-commit-messages](http://365git.tumblr.com/post/3308646748/writing-git-commit-messages)
* [http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)

<a name="H1_2_6"></a>
## Message footer

<a name="H1_2_7"></a>
## Breaking changes

All breaking changes have to be mentioned in footer with the description of the change,
justification and migration notes

    BREAKING CHANGE: isolate scope bindings definition has changed and
    the inject option for the directive controller injection was removed.

    To migrate the code follow the example below:

    Before:

    scope: {
      myAttr: 'attribute',
      myBind: 'bind',
      myExpression: 'expression',
      myEval: 'evaluate',
      myAccessor: 'accessor'
    }

    After:

    scope: {
      myAttr: '@',
      myBind: '@',
      myExpression: '&',
      // myEval - usually not useful, but in cases where the expression is assignable, you can use '='
      myAccessor: '=' // in directive's template change myAccessor() to myAccessor
    }

    The removed `inject` wasn't generaly useful for directives so there should be no code using it.

<a name="H1_2_8"></a>
## Referencing issues

Closed bugs should be listed on a separate line in the footer prefixed with "Closes" keyword like this:

    Closes #234

or in case of multiple issues:

    Closes #123, #245, #992

<a name="H1_3"></a>
# Examples

    feat($browser): onUrlChange event (popstate/hashchange/polling)

    Added new event to $browser:
    - forward popstate event if available
    - forward hashchange event if popstate not available
    - do polling when neither popstate nor hashchange available

    Breaks $browser.onHashChange, which was removed (use onUrlChange instead)


---

    fix($compile): couple of unit tests for IE9

    Older IEs serialize html uppercased, but IE9 does not...
    Would be better to expect case insensitive, unfortunately jasmine does
    not allow to user regexps for throw expectations.

    Closes #392
    Breaks foo.bar api, foo.baz should be used instead

---

    feat(directive): ng:disabled, ng:checked, ng:multiple, ng:readonly, ng:selected

    New directives for proper binding these attributes in older browsers (IE).
    Added coresponding description, live examples and e2e tests.

    Closes #351

---

    style($location): add couple of missing semi colons

---

    docs(guide): updated fixed docs from Google Docs

    Couple of typos fixed:
    - indentation
    - batchLogbatchLog -> batchLog
    - start periodic checking
    - missing brace

---

    feat($compile): simplify isolate scope bindings

    Changed the isolate scope binding options to:
    - @attr - attribute binding (including interpolation)
    - =model - by-directional model binding
    - &expr - expression execution binding

    This change simplifies the terminology as well as
    number of choices available to the developer. It
    also supports local name aliasing from the parent.

    BREAKING CHANGE: isolate scope bindings definition has changed and
    the inject option for the directive controller injection was removed.

    To migrate the code follow the example below:

    Before:

    scope: {
        myAttr: 'attribute',
        myBind: 'bind',
        myExpression: 'expression',
        myEval: 'evaluate',
        myAccessor: 'accessor'
    }

    After:

    scope: {
        myAttr: '@',
        myBind: '@',
        myExpression: '&',
        // myEval - usually not useful, but in cases where the expression is assignable, you can use '='
        myAccessor: '=' // in directive's template change myAccessor() to myAccessor
    }

    The removed `inject` wasn't generaly useful for directives so there should be no code using it.
